
Tag Reference
=============

:insert toc


=== block ===

::: django

    {% block <title> %} ... {% endblock %}

The `block` tag is used with the `extends` tag to implement [template inheritance](@root/inheritance//). The `title` argument is an arbitrary alphanumeric identifier for the block.


=== cycle ===

::: django

    {% cycle <expr> %}

The `cycle` tag can be used within a loop to cycle over the values of an iterable expression. Each time the tag is encountered it prints the next value in the sequence.

A typical use case might be to add alternating CSS classes to elements in a list:

::: django

    <ul>
        {% for item in somelist %}
            <li class="{% cycle 'odd', 'even' %}">{{ item }}</li>
        {% endfor %}
    </ul>


=== extends ===

::: django

    {% extends <parent> %}

The `extends` tag is used with the `block` tag to implement [template inheritance](@root/inheritance//). The `parent` argument should be a quoted string literal specifying the name of the parent template.


=== include ===

::: django

    {% include <name> %}

The `include` tag incorporates a sub-template into the current template. The `name` argument should be a quoted string literal or an expression evaluating to a string specifying the name of the sub-template to include. Note that you need to configure a [template loader](@root/api//#template-loaders) to use this tag.


=== for ===

::: django

    {% for <varname> in <expr> %} ... [ {% empty %} ... ] {% endfor %}

The `for` tag implements looping over an iterable expression. `for` tags support variable unpacking and an optional `empty` clause that gets rendered if the sequence is empty:

::: django

    {% for key, value in somedict.items() %}
        {{ key }}: {{ value }}
    {% empty %}
        The dictionary is empty.
    {% endfor %}

The automatic `loop` variable gives access to some useful data within the body of the loop:

:++

    Variable      | Description
    ------------- | -----------
    `loop.index`  | The current iteration of the loop (0-indexed).
    `loop.count`  | The current iteration of the loop (1-indexed).
    `loop.length` | The number of items in the sequence.
    `loop.first`  | True on the first iteration of the loop.
    `loop.last`   | True on the last iteration of the loop.
    `loop.parent` | For nested loops, the loop variable of the parent loop.


=== if ===

::: django

    {% if <expr> %} ... {% endif %}

    {% if <expr> <operator> <expr> %} ... {% endif %}

The `if` tag implements conditional branching. You can test the 'truthiness' of an expression or use any of the standard `==, !=, <, >, <=, >=, in, not in` operators to compare pairs of expressions:

::: django

    {% if author %}
        By {{ author }}.
    {% endif %}

    {% if author|lower == "bob" %}
        It's Bob again.
    {% endif %}

The `if` tag supports multiple `elif` clauses, along with an optional `else` clause:

::: django

    {% if balance > 100 %}
        We have lots of money.
    {% elif balance > 50 %}
        We have some money.
    {% else %}
        We're a little short on money.
    {% endif %}

The `if` tag also supports negation with the `not` keyword and combination with the `and` and `or` keywords; `and` has higher precedence than `or` so the condition:

::: django

    {% if a and b or c and d %}

is evaluated as:

::: django

    {% if (a and b) or (c and d) %}

Note that explicit brackets are not supported by the syntax.


=== spaceless ===

::: django

    {% spaceless %} ... {% endspaceless %}

The `spaceless` tag strips all whitespace from between HTML tags. For example, the HTML string:

::: django

    {% spaceless %}
        <ul>
            <li>List item.</li>
        </ul>
    {% endspaceless %}

would be rendered as:

::: html

    <ul><li>List item.</li></ul>


=== with ===

::: django

    {% with <alias> = <expr> %} ... {% endwith %}

The `with` tag caches a complex expression under a simpler alias. It's particularly useful for caching expensive method calls, e.g. database lookups:

::: django

    {% with foo = expensive.database.lookup("arg") %}
        Do someting with {{ foo }} here...
    {% endwith %}

Note that the alias is only available within the scope of the tag.
